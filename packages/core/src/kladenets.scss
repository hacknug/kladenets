@use "sass:map";

// Configs
$kladenets: () !default;
$kladenets: map.merge(
  (
    "fontstack": (
      prefix: "-apple-system, BlinkMacSystemFont,",
      sans-serif: '"Helvetica Neue", Arial, sans-serif',
      serif: "Georgia, serif",
      monospace: "Menlo, Consolas, monospace",
      default: "var(--fontstack-prefix) var(--fontstack-sans-serif)",
    ),

    "font": (
      size-base: "1rem",
      size-factor: "1vw",
      size: "calc(var(--font-size-base) + var(--font-size-factor))",
      features: '"halt", "cv01", "cv02", "cv03"',
    ),

    "line": (
      height: "calc(20 / 14)",
    ),

    "breakpoints": (
      xs: "400px",
      sm: "640px",
      md: "1080px",
      lg: "1600px",
    ),

    "space": (
      xs: "1.2vw",
      sm: "4vw",
      md: "8vw",
      lg: "24vw",
    ),

    "border": (
      xs: ".5px",
      sm: "1px",
      md: "2px",
      lg: "4px",
    ),

    "color-set": (
      "blue": (
        h: "211",
        s: "100%",
        l: "50%",
      ),
      "indigo": (
        h: "250",
        s: "90%",
        l: "54%",
      ),
      "purple": (
        h: "271",
        s: "70%",
        l: "60%",
      ),
      "pink": (
        h: "330",
        s: "70%",
        l: "63%",
      ),
      "red": (
        h: "349",
        s: "83%",
        l: "55%",
      ),
      "orange": (
        h: "27",
        s: "98%",
        l: "54%",
      ),
      "gold": (
        h: "40",
        s: "100%",
        l: "56%",
      ),
      "yellow": (
        h: "50",
        s: "100%",
        l: "60%",
      ),
      "lime": (
        h: "85",
        s: "80%",
        l: "44%",
      ),
      "green": (
        h: "145",
        s: "72%",
        l: "46%",
      ),
      "teal": (
        h: "170",
        s: "70%",
        l: "55%",
      ),
      "cyan": (
        h: "180",
        s: "80%",
        l: "60%",
      ),
      "black": (
        h: "238",
        s: "71%",
        l: "11%",
      ),
      "white": (
        h: "0",
        s: "0%",
        l: "100%",
      ),
      "text-color": (
        h: var(--black-h),
        s: var(--black-s),
        l: var(--black-l),
      ),
      "link-color": (
        h: var(--blue-h),
        s: var(--blue-s),
        l: var(--blue-l),
      ),
      "bg-color": (
        h: var(--white-h),
        s: var(--white-s),
        l: var(--white-l),
      ),
      "code-color": (
        h: calc(var(--link-color-h) + 180),
        s: var(--link-color-s),
        l: var(--link-color-l),
      ),
    ),

    "color-alpha-iterator": (
      0: "0",
      3: ".03",
      5: ".05",
      7: ".07",
      10: ".1",
      15: ".15",
      20: ".2",
      30: ".3",
      40: ".4",
      50: ".5",
      60: ".6",
      70: ".7",
      80: ".8",
      90: ".9",
      95: ".95",
      100: "1",
    ),

    "color-saturation-iterator": (
      0: "0%",
      3: "3%",
      5: "5%",
      7: "7%",
      10: "10%",
      15: "15%",
      20: "20%",
      30: "30%",
      40: "40%",
      50: "50%",
      60: "60%",
      70: "70%",
      80: "80%",
      90: "90%",
      95: "95%",
      100: "100%",
    ),

    "color-lightness-iterator": (
      0: "0%",
      3: "3%",
      5: "5%",
      7: "7%",
      10: "10%",
      15: "15%",
      20: "20%",
      30: "30%",
      40: "40%",
      50: "50%",
      60: "60%",
      70: "70%",
      80: "80%",
      90: "90%",
      95: "95%",
      100: "100%",
    ),

    "color-lightness-pretty-iterator": (
      lightest: "95",
      lighter: "80",
      light: "60",
      dark: "40",
      darker: "20",
      darkest: "5",
    ),
  ),

  $kladenets
);

$color-set-arr:
  "blue",
  "indigo",
  "purple",
  "pink",
  "red",
  "orange",
  "gold",
  "yellow",
  "green",
  "teal",
  "cyan",
  "black",
  "white",
  "text-color",
  "link-color",
  "bg-color",
  "code-color",
;

// Utilities
@mixin generate-namespaced-vars($name, $object) {
  @if $name == "" {
    @each $k, $v in $object {
      --#{$k}: #{$v};
    }
  } @else {
    @each $k, $v in $object {
      --#{$name}-#{$k}: #{$v};
    }
  }
}

@mixin generate-color-vars($name, $object) {
  /* Color - #{$name} */
  @include generate-namespaced-vars($name, $object);

  --#{$name}-hsl: var(--#{$name}-h), var(--#{$name}-s), var(--#{$name}-l);
  --#{$name}: hsl(var(--#{$name}-hsl));

  // TODO: space-separated level 4 specs seems doesn't work well with variables on HSLA
  @each $k, $v in map.get($kladenets, "color-alpha-iterator") {
    --#{$name}-#{$k}: hsla(var(--#{$name}-hsl), #{$v});
  }

  @each $k, $v in map.get($kladenets, "color-saturation-iterator") {
    --#{$name}-s#{$k}: hsl(var(--#{$name}-h) #{$v} var(--#{$name}-l));
  }

  @each $k, $v in map.get($kladenets, "color-lightness-iterator") {
    --#{$name}-l#{$k}: hsl(var(--#{$name}-h) var(--#{$name}-s) #{$v});
  }

  @each $k, $v in map.get($kladenets, "color-lightness-pretty-iterator") {
    --#{$name}-#{$k}: var(--#{$name}-#{$v});
  }
}

:root {

  /*
    Typography
  ----------------------------------------------------------------------------*/
  @include generate-namespaced-vars(fontstack, map.get($kladenets, "fontstack"));
  @include generate-namespaced-vars(font, map.get($kladenets, "font"));
  @include generate-namespaced-vars(line, map.get($kladenets, "line"));

  /*
    Layout
  ----------------------------------------------------------------------------*/
  @include generate-namespaced-vars(breakpoint, map.get($kladenets, "breakpoints"));
  @include generate-namespaced-vars(space, map.get($kladenets, "space"));
  @include generate-namespaced-vars(border, map.get($kladenets, "border"));

  /*
    Colors
  ----------------------------------------------------------------------------*/
  @each $k, $v in map.get($kladenets, "color-set") {
    @include generate-color-vars($k, map.get(map.get($kladenets, "color-set"), $k));
  }

  /*
    Color variants/variable mappings (based on our main color scheme)
  ----------------------------------------------------------------------------*/
  --border-color: var(--text-color-10);
}
